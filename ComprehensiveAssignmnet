
1.
//Base class
class account {
    protcted double balance;
    protcted double balance;

    public Account(double balance, double interestRate) {
        this.balance = balance;
        this.interestRate = interestRate;
    }

    public void calculateInterest() {
        double interest = balance * interestRate / 100;
        balance += interest;
        System.out.println("Interest calculated and added to the account.");
    }

    public void displayBalance() {
       
        System.out.println("Current balance: " + balance);
    }
  }

// Derived class for savings account 
    class SavingsAccount extends Account { 
       public SavingsAccount(double balance, double interestRate) { 
             super(balance, interestRate); 
  }
 
// You can add additional methods specific to SavingsAccount if needed 
}
 
// Derived class for current account 

    class CurrentAccount extends Account { 
        public CurrentAccount(double balance, double interestRate) { 
             super(balance, interestRate); 
        } 
// You can add additional methods specific to CurrentAccount if needed 
} 

 // Example usage 

public class Main { 
    public static void main(String[] args) { 
// Creating objects of derived classes 
     SavingsAccount savingsAccount = new SavingsAccount(1000, 5); 
     CurrentAccount currentAccount = new CurrentAccount(1500, 3); 
// Calling methods 
  savingsAccount.calculateInterest(); 
  savingsAccount.displayBalance(); 

  currentAccount.calculateInterest(); 
  currentAccount.displayBalance(); 
     } 
}




2.class Student:
    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age

    def display(self):
        print("Name:", self.name)
        print("Grade:", self.grade)
        print("Age:", self.age)


class School(Student):
    def school_student_display(self):
        print("Name:", self.name)
        print("Grade:", self.grade)
        print("Age:", self.age)


# Create an object of the Student class
student = Student("John", "A", 15)
student.display()

# Create an object of the School class
school_student = School("Jane", "B", 16)
school_student.school_student_display()


3.from selenium import webdriver

# Set the path to the Firefox driver executable
driver_path = "path/to/geckodriver"

# Launch Firefox browser
driver = webdriver.Firefox(executable_path=driver_path)
# Navigate to the MakeMyTrip website
driver.get("https://www.makemytrip.com/")
# Find the logo element using its XPath
logo_element = driver.find_element_by_xpath("//img[@alt='MakeMyTrip']")

# Check if the logo element is displayed on the page
if logo_element.is_displayed():
    print("The MakeMyTrip logo is present on the page.")
else:
    print("The MakeMyTrip logo is not present on the page.")

# Close the browser
driver.quit()

4.
from selenium import webdriver
from selenium.webdriver.common.by import By

# Function to launch browser and navigate to the website
def launch_browser():
    driver = webdriver.Chrome()
    driver.get("https://www.makemytrip.com/")
    return driver

# Function to find web element by XPath
def find_element_by_xpath(driver, xpath):
    return driver.find_element(By.XPATH, xpath)

# Function to click on a web element
def click_element(driver, element):
    element.click()

# Launch the browser
driver = launch_browser()

# Find and click on the "Flights" element
flights_element = find_element_by_xpath(driver, "//a[@data-cy='menu_Flights']")
click_element(driver, flights_element)

# Find and click on the "OneWay" element
one_way_element = find_element_by_xpath(driver, "//li[@data-cy='oneWayTrip']")
click_element(driver, one_way_element)

# Find and enter the "FROM" location
from_element = find_element_by_xpath(driver, "//input[@id='fromCity']")
from_element.send_keys("New York")

# Find and enter the "TO" location
to_element = find_element_by_xpath(driver, "//input[@id='toCity']")
to_element.send_keys("London")

# Close the browser
driver.quit()

5.
import org.poenqa.selenium.By;
import org.poenqa.selenium.WebDriver;
import org.poenqa.selenium.chrome.ChromeDriver;
import org.testing.annotations.test;
import org.testing.asserts.SoftAssert;
import org.testing.Assert;
@BeforeMethod
public void setUP() throws EXception {
    System.setProperty("webdriver.chrome.driver","/Users/kbhaskar/Documents/Drivers/chromedriver");
    driver = new ChromeDriver();
    driver.get("https://www.ebay.com/");
    Thread.sleep(2000);
}
@Test
public void url_of_the_page() throws EXception {
    String expectedURL = "https://www.ebay.com"
    String newUrl = driver.getCurrentUrl();
    System.out.println(newUrl);
    Assert.assertEquals(newUrl, expectedURL,"Verify URL of the new page");
}
@Test
public void title_of_the_page() throws EXception {
    String expectedTitle = "All categories - Browse and Discover more | eBay";
    WebElement searchBtn = driver.findElement(By.cssSelector("button.btn-prim"));

    Assert.assertEquals(searchBtn.isEnabled(),"Verify Serach Button Enabled");
    searchBtn.click();
    Thread.sleep(2000);
    String newTitle = driver.getCurrentUrl();
    System.out.println(newTitle);
    Assert.assertEquals(newTitle, expectedURL,"Verify Title of the new page");
}
@Test
public void category_options_in_ascending_order_test() throws EXception {
    List<WebElement> category_options = driver.findElements(By.cssSelector("select#e1-1>option"));
    List<String> arr1 = new ArrayList<String>();
    
    for(WebElement option : category_options) {
    arr1.add(option.getText());
    }
    List<String> arr2 = new ArrayList<String>(arr1);
    Collections.sort(arr2);
    System.out.println("Actual List" +arr1);
    System.out.println("Actual List" +arr2);
    Assert.assertEquals(arr1, arr2,"Verify Category Items Sorted");
}

6.
mvn archetype:generate -DgroupId=com.example -DartifactId=my-maven-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>3.141.59</version>
    </dependency>
    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.4.0</version>
    </dependency>
</dependencies>

mvn clean compile
mvn exec:java -Dexec.mainClass="com.example.VerifyLogoPresence"
mvn exec:java -Dexec.mainClass="com.example.InteractWithFlightsPage"


8.
// Request 1: Positive Test Case
pm.test("Positive Test Case", function () {
    pm.sendRequest({
        url: "http://universities.hipolabs.com/search?country=United+States",
        method: "GET"
    }, function (err, response) {
        pm.expect(response.code).to.be.oneOf([200, 201]);
        pm.expect(response.json()).to.have.property("results");
    });
});

// Request 2: Negative Test Case
pm.test("Negative Test Case", function () {
    pm.sendRequest({
        url: "http://universities.hipolabs.com/search?country=InvalidCountry",
        method: "GET"
    }, function (err, response) {
        pm.expect(response.code).to.be.oneOf([400, 404]);
        pm.expect(response.json()).to.have.property("message");
    });
});

9.
import org.apache.jmeter.control.LoopController;
import org.apache.jmeter.control.ThreadGroup;
import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
import org.apache.jmeter.testelement.TestPlan;
import org.apache.jmeter.util.JMeterUtils;

public class JMeterTestPlan {

    public static void main(String[] args) {
        // Create Test Plan
        TestPlan testPlan = new TestPlan("My Test Plan");

        // Create Thread Group
        ThreadGroup threadGroup = new ThreadGroup();
        threadGroup.setName("My Thread Group");
        threadGroup.setNumThreads(10);
        threadGroup.setRampUp(5);

        // Create Loop Controller
        LoopController loopController = new LoopController();
        loopController.setLoops(1);
        loopController.addTestElement(new HTTPSampler("https://www.makemytrip.com/"));

        // Add Loop Controller to Thread Group
        threadGroup.setSamplerController(loopController);

        // Add Thread Group to Test Plan
        testPlan.addThreadGroup(threadGroup);

        // Add Assertion to HTTP Sampler
        HTTPSampler httpSampler = (HTTPSampler) loopController.getSamplerAt(0);
        httpSampler.addAssertionResultListener();

        // Set JMeter properties
        JMeterUtils.loadJMeterProperties("jmeter.properties");

        // Run Test Plan
        JMeterUtils.runTestPlan(testPlan);
    }
}

10.
import pytest
from selenium import webdriver

@pytest.fixture
def browser():
    # Launch Chrome browser
    driver = webdriver.Chrome()
    yield driver
    # Close the browser after the test
    driver.quit()

def test_verify_logo_presence(browser):
    # Open the W3Schools website
    browser.get("https://www.w3schools.com/")
    
    # Verify the presence of the W3Schools logo
    logo = browser.find_element_by_xpath("//img[@alt='W3Schools.com']")
    assert logo.is_displayed()
